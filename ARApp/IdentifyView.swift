//
// IdentifyView.swift
// Generated by Core Animator version 1.4 on 2017-05-18.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class IdentifyPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class IdentifyView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 515, height: 486))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:515, height:486)
		__scaling__.center = CGPoint(x:257.8, y:243.1)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let identifying1__root = IdentifyPassthroughView()
		let identifying1__xScale = IdentifyPassthroughView()
		let identifying1__yScale = IdentifyPassthroughView()
		let identifying1 = UIImageView()
		let imgIdentifying1 = UIImage(named:"identifying1.png", in: bundle, compatibleWith: nil)
		if imgIdentifying1 == nil {
			print("** Warning: Could not create image from 'identifying1.png'")
		}
		identifying1.image = imgIdentifying1
		identifying1.contentMode = .center
		identifying1.bounds = CGRect(x:0, y:0, width:512.0, height:512.0)
		identifying1__root.layer.position = CGPoint(x:258.498, y:260.253)
		identifying1__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		identifying1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		identifying1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(identifying1__root)
		identifying1__root.addSubview(identifying1__xScale)
		identifying1__xScale.addSubview(identifying1__yScale)
		identifying1__yScale.addSubview(identifying1)
		__scaling__.addSubview(identifying1__root)
		viewsByName["identifying1__root"] = identifying1__root
		viewsByName["identifying1__xScale"] = identifying1__xScale
		viewsByName["identifying1__yScale"] = identifying1__yScale
		viewsByName["identifying1"] = identifying1

		let identifying2__root = IdentifyPassthroughView()
		let identifying2__xScale = IdentifyPassthroughView()
		let identifying2__yScale = IdentifyPassthroughView()
		let identifying2 = UIImageView()
		let imgIdentifying2 = UIImage(named:"identifying2.png", in: bundle, compatibleWith: nil)
		if imgIdentifying2 == nil {
			print("** Warning: Could not create image from 'identifying2.png'")
		}
		identifying2.image = imgIdentifying2
		identifying2.contentMode = .center
		identifying2.bounds = CGRect(x:0, y:0, width:279.0, height:194.0)
		identifying2__root.layer.position = CGPoint(x:360.961, y:357.253)
		identifying2__root.alpha = 0.92
		identifying2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		identifying2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		identifying2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(identifying2__root)
		identifying2__root.addSubview(identifying2__xScale)
		identifying2__xScale.addSubview(identifying2__yScale)
		identifying2__yScale.addSubview(identifying2)
		__scaling__.addSubview(identifying2__root)
		viewsByName["identifying2__root"] = identifying2__root
		viewsByName["identifying2__xScale"] = identifying2__xScale
		viewsByName["identifying2__yScale"] = identifying2__yScale
		viewsByName["identifying2"] = identifying2

		self.viewsByName = viewsByName
	}

	// - MARK: search

	func addSearchAnimation() {
		addSearchAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addSearchAnimation(completion: ((Bool) -> Void)?) {
		addSearchAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addSearchAnimation(removedOnCompletion: Bool) {
		addSearchAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addSearchAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addSearchAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addSearchAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 2.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Search")
			self.animationCompletions[layer.animation(forKey: "Search")!] = complete
		}

		let identifying2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		identifying2RotationAnimation.duration = 2.000
		identifying2RotationAnimation.values = [0.000, -1.941] as [Float]
		identifying2RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		identifying2RotationAnimation.timingFunctions = [easeInOutTiming]
		identifying2RotationAnimation.autoreverses = true
		identifying2RotationAnimation.repeatCount = HUGE
		identifying2RotationAnimation.beginTime = beginTime
		identifying2RotationAnimation.fillMode = fillMode
		identifying2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["identifying2__root"]?.layer.add(identifying2RotationAnimation, forKey:"search_Rotation")

		let identifying2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		identifying2TranslationXAnimation.duration = 2.000
		identifying2TranslationXAnimation.values = [0.000, -245.062] as [Float]
		identifying2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		identifying2TranslationXAnimation.timingFunctions = [easeInOutTiming]
		identifying2TranslationXAnimation.autoreverses = true
		identifying2TranslationXAnimation.repeatCount = HUGE
		identifying2TranslationXAnimation.beginTime = beginTime
		identifying2TranslationXAnimation.fillMode = fillMode
		identifying2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["identifying2__root"]?.layer.add(identifying2TranslationXAnimation, forKey:"search_TranslationX")

		let identifying2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		identifying2TranslationYAnimation.duration = 2.000
		identifying2TranslationYAnimation.values = [0.000, -89.356] as [Float]
		identifying2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		identifying2TranslationYAnimation.timingFunctions = [easeInOutTiming]
		identifying2TranslationYAnimation.autoreverses = true
		identifying2TranslationYAnimation.repeatCount = HUGE
		identifying2TranslationYAnimation.beginTime = beginTime
		identifying2TranslationYAnimation.fillMode = fillMode
		identifying2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["identifying2__root"]?.layer.add(identifying2TranslationYAnimation, forKey:"search_TranslationY")
	}

	func removeSearchAnimation() {
		self.layer.removeAnimation(forKey: "Search")
		self.viewsByName["identifying2__root"]?.layer.removeAnimation(forKey: "search_Rotation")
		self.viewsByName["identifying2__root"]?.layer.removeAnimation(forKey: "search_TranslationX")
		self.viewsByName["identifying2__root"]?.layer.removeAnimation(forKey: "search_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Search")
	}
}