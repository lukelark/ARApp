//
// IdentifyView.swift
// Generated by Core Animator version 1.4 on 2017-05-18.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class IdentifyPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class IdentifyView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 515, height: 486))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:515, height:486)
		__scaling__.center = CGPoint(x:257.8, y:243.1)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let identifying1__root = IdentifyPassthroughView()
		let identifying1__xScale = IdentifyPassthroughView()
		let identifying1__yScale = IdentifyPassthroughView()
		let identifying1 = UIImageView()
		let imgIdentifying1 = UIImage(named:"identifying1.png", in: bundle, compatibleWith: nil)
		if imgIdentifying1 == nil {
			print("** Warning: Could not create image from 'identifying1.png'")
		}
		identifying1.image = imgIdentifying1
		identifying1.contentMode = .center
		identifying1.bounds = CGRect(x:0, y:0, width:512.0, height:512.0)
		identifying1__root.layer.position = CGPoint(x:258.498, y:260.253)
		identifying1__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		identifying1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		identifying1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(identifying1__root)
		identifying1__root.addSubview(identifying1__xScale)
		identifying1__xScale.addSubview(identifying1__yScale)
		identifying1__yScale.addSubview(identifying1)
		__scaling__.addSubview(identifying1__root)
		viewsByName["identifying1__root"] = identifying1__root
		viewsByName["identifying1__xScale"] = identifying1__xScale
		viewsByName["identifying1__yScale"] = identifying1__yScale
		viewsByName["identifying1"] = identifying1

		let identifying2__root = IdentifyPassthroughView()
		let identifying2__xScale = IdentifyPassthroughView()
		let identifying2__yScale = IdentifyPassthroughView()
		let identifying2 = UIImageView()
		let imgIdentifying2 = UIImage(named:"identifying2.png", in: bundle, compatibleWith: nil)
		if imgIdentifying2 == nil {
			print("** Warning: Could not create image from 'identifying2.png'")
		}
		identifying2.image = imgIdentifying2
		identifying2.contentMode = .center
		identifying2.bounds = CGRect(x:0, y:0, width:279.0, height:194.0)
		identifying2__root.layer.position = CGPoint(x:360.961, y:357.253)
		identifying2__root.alpha = 0.92
		identifying2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		identifying2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		identifying2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(identifying2__root)
		identifying2__root.addSubview(identifying2__xScale)
		identifying2__xScale.addSubview(identifying2__yScale)
		identifying2__yScale.addSubview(identifying2)
		__scaling__.addSubview(identifying2__root)
		viewsByName["identifying2__root"] = identifying2__root
		viewsByName["identifying2__xScale"] = identifying2__xScale
		viewsByName["identifying2__yScale"] = identifying2__yScale
		viewsByName["identifying2"] = identifying2

		let verified__root = IdentifyPassthroughView()
		let verified__xScale = IdentifyPassthroughView()
		let verified__yScale = IdentifyPassthroughView()
		let verified = UIImageView()
		let imgVerified = UIImage(named:"verified.png", in: bundle, compatibleWith: nil)
		if imgVerified == nil {
			print("** Warning: Could not create image from 'verified.png'")
		}
		verified.image = imgVerified
		verified.contentMode = .center
		verified.bounds = CGRect(x:0, y:0, width:224.0, height:224.0)
		verified__root.layer.position = CGPoint(x:401.066, y:384.888)
		verified__xScale.transform = CGAffineTransform(scaleX: 0.38, y: 1.00)
		verified__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.38)
		verified__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(verified__root)
		verified__root.addSubview(verified__xScale)
		verified__xScale.addSubview(verified__yScale)
		verified__yScale.addSubview(verified)
		__scaling__.addSubview(verified__root)
		viewsByName["verified__root"] = verified__root
		viewsByName["verified__xScale"] = verified__xScale
		viewsByName["verified__yScale"] = verified__yScale
		viewsByName["verified"] = verified

		self.viewsByName = viewsByName
	}

	// - MARK: search

	func addSearchAnimation() {
		addSearchAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addSearchAnimation(completion: ((Bool) -> Void)?) {
		addSearchAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addSearchAnimation(removedOnCompletion: Bool) {
		addSearchAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addSearchAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addSearchAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addSearchAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 2.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Search")
			self.animationCompletions[layer.animation(forKey: "Search")!] = complete
		}

		let verifiedOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		verifiedOpacityAnimation.duration = 2.000
		verifiedOpacityAnimation.values = [0.000, 0.000] as [Float]
		verifiedOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		verifiedOpacityAnimation.timingFunctions = [linearTiming]
		verifiedOpacityAnimation.beginTime = beginTime
		verifiedOpacityAnimation.fillMode = fillMode
		verifiedOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["verified__root"]?.layer.add(verifiedOpacityAnimation, forKey:"search_Opacity")

		let verifiedImageContentsAnimation = CAKeyframeAnimation(keyPath: "contents")
		verifiedImageContentsAnimation.duration = 2.000
		verifiedImageContentsAnimation.values = [UIImage(named: "verified", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!, UIImage(named: "verified", in: Bundle(for:type(of: self)), compatibleWith: nil)!.cgImage!] as [CGImage]
		verifiedImageContentsAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		verifiedImageContentsAnimation.timingFunctions = [linearTiming]
		verifiedImageContentsAnimation.beginTime = beginTime
		verifiedImageContentsAnimation.fillMode = fillMode
		verifiedImageContentsAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["verified"]?.layer.add(verifiedImageContentsAnimation, forKey:"search_ImageContents")

		let identifying2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		identifying2RotationAnimation.duration = 2.000
		identifying2RotationAnimation.values = [0.000, -1.941] as [Float]
		identifying2RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		identifying2RotationAnimation.timingFunctions = [easeInOutTiming]
		identifying2RotationAnimation.autoreverses = true
		identifying2RotationAnimation.repeatCount = HUGE
		identifying2RotationAnimation.beginTime = beginTime
		identifying2RotationAnimation.fillMode = fillMode
		identifying2RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["identifying2__root"]?.layer.add(identifying2RotationAnimation, forKey:"search_Rotation")

		let identifying2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		identifying2TranslationXAnimation.duration = 2.000
		identifying2TranslationXAnimation.values = [0.000, -245.062] as [Float]
		identifying2TranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		identifying2TranslationXAnimation.timingFunctions = [easeInOutTiming]
		identifying2TranslationXAnimation.autoreverses = true
		identifying2TranslationXAnimation.repeatCount = HUGE
		identifying2TranslationXAnimation.beginTime = beginTime
		identifying2TranslationXAnimation.fillMode = fillMode
		identifying2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["identifying2__root"]?.layer.add(identifying2TranslationXAnimation, forKey:"search_TranslationX")

		let identifying2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		identifying2TranslationYAnimation.duration = 2.000
		identifying2TranslationYAnimation.values = [0.000, -89.356] as [Float]
		identifying2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		identifying2TranslationYAnimation.timingFunctions = [easeInOutTiming]
		identifying2TranslationYAnimation.autoreverses = true
		identifying2TranslationYAnimation.repeatCount = HUGE
		identifying2TranslationYAnimation.beginTime = beginTime
		identifying2TranslationYAnimation.fillMode = fillMode
		identifying2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["identifying2__root"]?.layer.add(identifying2TranslationYAnimation, forKey:"search_TranslationY")
	}

	func removeSearchAnimation() {
		self.layer.removeAnimation(forKey: "Search")
		self.viewsByName["verified__root"]?.layer.removeAnimation(forKey: "search_Opacity")
		self.viewsByName["verified"]?.layer.removeAnimation(forKey: "search_ImageContents")
		self.viewsByName["identifying2__root"]?.layer.removeAnimation(forKey: "search_Rotation")
		self.viewsByName["identifying2__root"]?.layer.removeAnimation(forKey: "search_TranslationX")
		self.viewsByName["identifying2__root"]?.layer.removeAnimation(forKey: "search_TranslationY")
	}

	// - MARK: verified

	func addVerifiedAnimation() {
		addVerifiedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addVerifiedAnimation(completion: ((Bool) -> Void)?) {
		addVerifiedAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addVerifiedAnimation(removedOnCompletion: Bool) {
		addVerifiedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addVerifiedAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addVerifiedAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addVerifiedAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let overshootTiming = CAMediaTimingFunction(controlPoints: 0.00, 0.00, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Verified")
			self.animationCompletions[layer.animation(forKey: "Verified")!] = complete
		}

		let verifiedOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		verifiedOpacityAnimation.duration = 0.500
		verifiedOpacityAnimation.values = [0.920, 0.920] as [Float]
		verifiedOpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		verifiedOpacityAnimation.timingFunctions = [linearTiming]
		verifiedOpacityAnimation.beginTime = beginTime
		verifiedOpacityAnimation.fillMode = fillMode
		verifiedOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["verified__root"]?.layer.add(verifiedOpacityAnimation, forKey:"verified_Opacity")

		let verifiedScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		verifiedScaleXAnimation.duration = 0.500
		verifiedScaleXAnimation.values = [0.385, 0.727] as [Float]
		verifiedScaleXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		verifiedScaleXAnimation.timingFunctions = [overshootTiming]
		verifiedScaleXAnimation.beginTime = beginTime
		verifiedScaleXAnimation.fillMode = fillMode
		verifiedScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["verified__xScale"]?.layer.add(verifiedScaleXAnimation, forKey:"verified_ScaleX")

		let verifiedScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		verifiedScaleYAnimation.duration = 0.500
		verifiedScaleYAnimation.values = [0.385, 0.727] as [Float]
		verifiedScaleYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		verifiedScaleYAnimation.timingFunctions = [overshootTiming]
		verifiedScaleYAnimation.beginTime = beginTime
		verifiedScaleYAnimation.fillMode = fillMode
		verifiedScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["verified__yScale"]?.layer.add(verifiedScaleYAnimation, forKey:"verified_ScaleY")

		let verifiedTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		verifiedTranslationXAnimation.duration = 0.500
		verifiedTranslationXAnimation.values = [0.000, 8.338] as [Float]
		verifiedTranslationXAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		verifiedTranslationXAnimation.timingFunctions = [overshootTiming]
		verifiedTranslationXAnimation.beginTime = beginTime
		verifiedTranslationXAnimation.fillMode = fillMode
		verifiedTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["verified__root"]?.layer.add(verifiedTranslationXAnimation, forKey:"verified_TranslationX")

		let verifiedTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		verifiedTranslationYAnimation.duration = 0.500
		verifiedTranslationYAnimation.values = [0.000, -38.338] as [Float]
		verifiedTranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		verifiedTranslationYAnimation.timingFunctions = [overshootTiming]
		verifiedTranslationYAnimation.beginTime = beginTime
		verifiedTranslationYAnimation.fillMode = fillMode
		verifiedTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["verified__root"]?.layer.add(verifiedTranslationYAnimation, forKey:"verified_TranslationY")

		let identifying2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		identifying2OpacityAnimation.duration = 0.500
		identifying2OpacityAnimation.values = [0.000, 0.000] as [Float]
		identifying2OpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		identifying2OpacityAnimation.timingFunctions = [linearTiming]
		identifying2OpacityAnimation.beginTime = beginTime
		identifying2OpacityAnimation.fillMode = fillMode
		identifying2OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["identifying2__root"]?.layer.add(identifying2OpacityAnimation, forKey:"verified_Opacity")
	}

	func removeVerifiedAnimation() {
		self.layer.removeAnimation(forKey: "Verified")
		self.viewsByName["verified__root"]?.layer.removeAnimation(forKey: "verified_Opacity")
		self.viewsByName["verified__xScale"]?.layer.removeAnimation(forKey: "verified_ScaleX")
		self.viewsByName["verified__yScale"]?.layer.removeAnimation(forKey: "verified_ScaleY")
		self.viewsByName["verified__root"]?.layer.removeAnimation(forKey: "verified_TranslationX")
		self.viewsByName["verified__root"]?.layer.removeAnimation(forKey: "verified_TranslationY")
		self.viewsByName["identifying2__root"]?.layer.removeAnimation(forKey: "verified_Opacity")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Verified")
		self.layer.removeAnimation(forKey: "Search")
	}
}